# Generated by Selenium IDE
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities

from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC

options = Options()

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)


class TestPage2Loginpage():
    ''' 
  DESCRIPTION: This test trys to login with an unregistered and registered UID & PWD
  PROCEDURE: 
  1. go to browser app
  2. click on sign in
  3. provide wrong UI & PWD on login screen
  4. check if the login failed after the roundtrip to server
  5. provide correct UI & PWD on login screen
  6. redirect to user dashboard for registered
  EXPECTED OUTCOME: The login should fail for an unregistered user and redirect to user dashboard for registered
  '''
    def setup_method(self, method):
      self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)
      self.vars = {}
    
    def teardown_method(self, method):
       self.driver.quit()
       
    def test_page2Loginpage(self):
      # Test name: Page_2_Login_page
      # Step # | name | target | value
      # 1 | open | / | 
      # go to url - https://qbrow.rasree.com
      self.driver.get("https://qbrow.rasree.com/")
      # 2 | setWindowSize | 1440x804 | 
      self.driver.set_window_size(1440, 804)

      # 3 | click | css=.bWxOKe:nth-child(1) | 
      # click on sign in button
      self.driver.find_element(By.CSS_SELECTOR, ".bWxOKe:nth-child(1)").click()

      # 4 | click | id=username | 
      self.driver.find_element(By.ID, "username").click()

      # # 5 | type | id=username | test_1
      # # enter wrong User ID
      # self.driver.find_element(By.ID, "username").send_keys("test_1")

      # # 6 | click | id=password | 
      # self.driver.find_element(By.ID, "password").click()


      # 7 | type | id=password | testpassword
      # enter wrong password
      # self.driver.find_element(By.ID, "password").send_keys("testpassword")
      # # 8 | click | id=kc-login | 
      # self.driver.find_element(By.ID, "kc-login").click()
      # # 9 | click | id=username | 
      # self.driver.find_element(By.ID, "username").click()
      # # 10 | type | id=username | admin_a

      # enter correct User ID
      self.driver.find_element(By.ID, "username").send_keys("admin_a")
      # 11 | click | id=password | 
      self.driver.find_element(By.ID, "password").click()
      # 12 | type | id=password | password
      # enter correct password
      self.driver.find_element(By.ID, "password").send_keys("password")
      # 13 | click | id=kc-login | 
      self.driver.find_element(By.ID, "kc-login").click()
      # 14 | click | css=.iZqLUj | 
      # click on user profile option

      wait = WebDriverWait(self.driver, 10)
      element = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, ".iZqLUj")))

      # Click on the element
      element.click()

      # self.driver.find_element(By.CSS_SELECTOR, ".iZqLUj").click()

      # 15 | click | css=.Ovxqx:nth-child(5) | 
      # click on logout option
      # self.driver.find_element(By.CSS_SELECTOR, ".Ovxqx:nth-child(5)").click()
    
