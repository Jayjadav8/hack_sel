# Generated by Selenium IDE
import os
import pytest
import time
import json
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities


from webdriver_manager.chrome import ChromeDriverManager
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from webdriver_manager.chrome import ChromeDriverManager
options = Options()

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)


class TestAutotestingunsignedhomePage():
  def setup_method(self, method):
    self.driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

    self.vars = {}
  
  def teardown_method(self, method):
    self.driver.quit()
  
  def test_autotestingunsignedhomePage(self):

    filename = os.path.basename(__file__)
    # Remove the file extension from the filename
    test_name = os.path.splitext(filename)[0]

    # Create a directory for storing the screenshots if it doesn't exist
    screenshots_directory = "screenshot"
    test_directory = os.path.join(screenshots_directory, test_name)
    if not os.path.exists(test_directory):
        os.makedirs(test_directory)


    # Test name: Auto_testing_unsigned_home_Page
    # Step # | name | target | value
    # 1 | open | / | 
    self.driver.get("https://qbrow.rasree.com/")
    # 2 | setWindowSize | 1440x804 | 
    self.driver.set_window_size(1440, 804)
    # 3 | click | id=inputExploreBtn | 
    # click on explore
    self.driver.find_element(By.ID, "inputExploreBtn").click()
    screenshot_filename = f"{test_name}_screenshot_explorepage.png"
    screenshot_path = os.path.join(test_directory, screenshot_filename)
    self.driver.get_screenshot_as_file(screenshot_path)



    # 4 | click | id=inputHomeIcon | 
    # back to home page
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    # 5 | click | id=inputSearchBar | 
    # click on search bar text fill
    self.driver.find_element(By.ID, "inputSearchBar").click()
    # 6 | type | id=inputSearchBar | course
    # type in search bar fill
    self.driver.find_element(By.ID, "inputSearchBar").send_keys("course")
    # 7 | click | id=inputClickOnSearchItem | 
    # click on search icon
    self.driver.find_element(By.ID, "inputClickOnSearchItem").click()
    # 8 | click | id=inputHomeIcon | 
    # back to home page
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    
    time.sleep(5)
    
    # 9 | click | id=inputViewAllCoursesButton | 
    # click on view all in course
    self.driver.find_element(By.ID, "inputViewAllCoursesButton").click()
    # 10 | click | id=inputHomeIcon | 
    # back to home page
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    # 11 | click | id=inputViewCourseDetails_1 | 
    
    time.sleep(5)
    
    # click on view detail in course button
    self.driver.find_element(By.ID, "inputViewCourseDetails_1").click()
    # # 12 | click | id=inputHomeIcon | 
    # # back to home page
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    # # 13 | click | id=inputViewTeamDetailsButton | 
    # # In meet the team on click on view more button
    self.driver.find_element(By.ID, "inputViewTeamDetailsButton").click()
    # # 14 | click | id=inputHomeIcon | 
    # # back to home page
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    # # 15 | mouseOver | id=inputHomeIcon | 
    element = self.driver.find_element(By.ID, "inputHomeIcon")
    actions = ActionChains(self.driver)
    actions.move_to_element(element).perform()
    # 16 | mouseOut | css=#inputHomeIcon > img | 
    element = self.driver.find_element(By.CSS_SELECTOR, "body")
    actions = ActionChains(self.driver)
    # actions.move_to_element(element, 0, 0).perform()
    
    actions.move_to_element(element).perform()
    
    
    # # # 17 | click | css=#inputViewCourse_Math > span | 
    # click on Math button in footer
    self.driver.find_element(By.CSS_SELECTOR, "#inputViewCourse_Math > span").click()
    # 18 | click | id=inputHomeIcon | 
    # back to home page
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    # # 19 | click | css=#inputViewAbhyasSection_About\ us > span | 
    # # click on Abhyas button
    self.driver.find_element(By.CSS_SELECTOR, "#inputViewAbhyasSection_About\\ us > span").click()
    # # 20 | click | id=inputHomeIcon | 
    # # back to home page
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    # # 21 | click | css=#inputViewTermsSection_Privacy\ policy > span | 
    # # click on privacy button
    self.driver.find_element(By.CSS_SELECTOR, "#inputViewTermsSection_Privacy\\ policy > span").click()
    # # 22 | click | id=inputHomeIcon | 
    # # back to home page
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    # # 23 | click | id=inputSignUpButton | 
    self.driver.find_element(By.ID, "inputSignUpButton").click()
    # # 24 | click | id=inputSignUpButton | 
    self.driver.find_element(By.ID, "inputSignUpButton").click()
    # # 25 | doubleClick | id=inputSignUpButton | 
    # #  double click on sign up button  
    element = self.driver.find_element(By.ID, "inputSignUpButton")
    actions = ActionChains(self.driver)
    actions.double_click(element).perform()
    # # 26 | click | css=.tf-v1-close | 
    # # This will click on 'X' mark
    self.driver.find_element(By.CSS_SELECTOR, ".tf-v1-close").click()
    # # 27 | click | id=inputSignInButton | 
    # # click on sign button
    self.driver.find_element(By.ID, "inputSignInButton").click()
  
