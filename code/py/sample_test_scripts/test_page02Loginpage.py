# Generated by Selenium IDE
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
import os



class TestPage2Loginpage():
    ''' 
    DESCRIPTION: This test trys to login with an unregistered and registered UID & PWD
    PROCEDURE: 
    1. go to browser app
    2. click on sign in
    3. provide correct UI & PWD on login screen
    4. check if the login passed after the roundtrip to server
    5. redirect to user dashboard for registered
    EXPECTED OUTCOME: The login should pass for an registered user.
    '''
    def setup_method(self, method):
      '''Set up the test environment before each test method runs
      - webdriver.Chrome class is used to create an instance of the Chrome browser driver.
      '''
      self.driver = webdriver.Chrome()
      self.vars = {}
    
    def teardown_method(self, method):
      '''
      - Clean up after each test method finishes.
      - self.driver.quit() is called.
      - This command tells Selenium to close and quit the web browser and release any associated resources.
      '''
      self.driver.quit()

  
    def capture_screenshot(self, step_name):
      ''' 
      Captures a screenshot of the current browser window and 
      saves it with the given step_name.
      Input attribute is  step_name: The name of the step for which the screenshot is captured.
      '''
        
      filename = os.path.basename(__file__)
      # Remove the file extension from the filename
      test_name = os.path.splitext(filename)[0]

      # Create a directory for storing the screenshots if it doesn't exist
      screenshots_directory = "../screenshot"
      test_directory = os.path.join(screenshots_directory, test_name)
      if not os.path.exists(test_directory):
          os.makedirs(test_directory)
      screenshot_path = os.path.join(test_directory, f"{step_name}.png")
      self.driver.get_screenshot_as_file(screenshot_path)

       
    def test_page2Loginpage(self):
      '''
      Test name: Page_2_Login_page
      - Check if user is successfully log in if user id and 
      password are correct.
      Step # | name | target | value
      '''

      # Creating instance of WebDriverWait class.
      wait = WebDriverWait(self.driver, 60)

      # 1 | open | / | 
      # go to url - https://qbrow.rasree.com
      self.driver.get("https://qbrow.rasree.com/")
      # 2 | setWindowSize | 1440x804 | 
      self.driver.set_window_size(1440, 804)

      expected_title = "Home | Rasree"
      assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
          does not match expected title '{expected_title}'"
      self.capture_screenshot("Step_2_Homepage")

      # 3 | click | css=.bWxOKe:nth-child(1) | 
      # click on sign in button 
      self.driver.find_element(By.ID, "inputSignInButton").click()
      expected_title = "Rasree Login Page"
      assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
          does not match expected title '{expected_title}'"

      # 4 | click | id=username | 
      self.driver.find_element(By.ID, "username").click()
      # enter correct User ID
      self.driver.find_element(By.ID, "username").send_keys("admin_a")

      username_text = self.driver.find_element(By.ID, "username").get_attribute("value")
      assert username_text == "admin_a", f"username text is '{username_text}', expected 'admin_a'"

      # 5 | click | id=password | 
      self.driver.find_element(By.ID, "password").click()

      # 6 | type | id=password | password
      # enter correct password
      self.driver.find_element(By.ID, "password").send_keys("password")

      password_text = self.driver.find_element(By.ID, "password").get_attribute("value")
      assert password_text == "password", f"password text is '{password_text}', expected 'password'"
      self.capture_screenshot("Step_6_ValueInsert")

      # 7 | click | id=kc-login | 
      self.driver.find_element(By.ID, "kc-login").click()
      
      # 8 | click | id=profileBtn | 
      # click on user profile option
      wait.until(EC.element_to_be_clickable((By.ID,"profileBtn"))).click()

      # 9 | Directs to login page | 
      expected_login_page_url = "https://qbrow.rasree.com/admin/dashBoard"
      assert expected_login_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
          does not match expected URL '{expected_login_page_url}'"
      self.capture_screenshot("Step_9_LoginPage")

      # 10 | click | xpath  | 
      # click on logout option
      wait.until(EC.element_to_be_clickable((By.XPATH,'//*[@id="inputProfileModal"]/div/button[4]'))).click()

      expected_title = "Home | Rasree"
      assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
          does not match expected title '{expected_title}'"
      self.capture_screenshot("Step_10_unsignLoginPage")


      