# Generated by Selenium IDE
import pytest
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support import expected_conditions as EC
import os

class TestPage01unsignedhomepage():
  '''
  - This is automation testing of unsigned home page.
  - There are 3 methods which is executed in class TestPage01unsignedhomepage, \
  which are setup_method, teardown_method and test_page01unsignedhomepage.
  '''
  def setup_method(self, method):
    '''Set up the test environment before each test method runs
    - webdriver.Chrome class is used to create an instance of the Chrome browser driver.
    '''
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    '''
    - Clean up after each test method finishes.
    - self.driver.quit() is called.
    - This command tells Selenium to close and quit the web browser and release any associated resources.
    '''
    self.driver.quit()

  

  def capture_screenshot(self, step_name):
    ''' 
    Captures a screenshot of the current browser window and 
    saves it with the given step_name.
    Input attribute is  step_name: The name of the step for which the screenshot is captured.
     '''
      
    filename = os.path.basename(__file__)
    # Remove the file extension from the filename
    test_name = os.path.splitext(filename)[0]

    # Create a directory for storing the screenshots if it doesn't exist
    screenshots_directory = "../screenshot"
    test_directory = os.path.join(screenshots_directory, test_name)
    if not os.path.exists(test_directory):
        os.makedirs(test_directory)
    screenshot_path = os.path.join(test_directory, f"{step_name}.png")
    self.driver.get_screenshot_as_file(screenshot_path)



  def test_page01unsignedhomepage(self):
    '''
    - Test name: page_01_unsignedhome_page
    Step # | name | target | value
    - Each step is very well describe by dividing into small steps
     and  applying comments on each steps. 
     - Assert statements are been added to ensure each step is executed as expected.
    '''
  
  # Creating instance of WebDriverWait class.
    wait = WebDriverWait(self.driver, 60)

    # 1 | open | / | 
    # go to URL:https://qbrow.rasree.com
    self.driver.get("https://qbrow.rasree.com/")
    # 2 | setWindowSize | 1440x805 | 
    self.driver.set_window_size(1440, 805)

    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"
    self.capture_screenshot("Step_2_Homepage")

    # 3 | click | id=inputExploreBtn | 
    # click on explore button 
    self.driver.find_element(By.ID, "inputExploreBtn").click()

    expected_title = "Explore | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"
    self.capture_screenshot("Step_3_ExplorePage")

    # 4 | click | id=inputHomeIcon | 
    # click on RASREE icon for back.
    self.driver.find_element(By.ID, "inputHomeIcon").click()

    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"
    self.capture_screenshot("Step_4_HomepageAfterBack")

    # 5 | click | id=inputSearchBar | 
    # click on input search bar
    self.driver.find_element(By.ID, "inputSearchBar").click()
#   TODO : add assert


    # 6 | type | id=inputSearchBar | course
    # type course in input search bar
    self.driver.find_element(By.ID, "inputSearchBar").send_keys("course")

    course_search_text = self.driver.find_element(By.ID, "inputSearchBar").get_attribute("value")
    assert course_search_text == "course", f"Search bar text is '{course_search_text}', expected 'course'"
    self.capture_screenshot("Step_6_SearchBarWithText")

    # 7 | click | id=inputClickOnSearchItem | 
    # click on search icon
    self.driver.find_element(By.ID, "inputClickOnSearchItem").click()

    expected_course_search_page_url = "https://qbrow.rasree.com/browseSearch?search_text=course"
    assert expected_course_search_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
        does not match expected URL '{expected_course_search_page_url}'"
    self.capture_screenshot("Step_7_CourseSearchPage")
    
    # 8 | click | id=inputHomeIcon | 
    # click on RASREE icon
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    
    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"

    # 9 | click | id=inputSearchBar | 
    # click on input search bar
    self.driver.find_element(By.ID, "inputSearchBar").click()
    # TODO : add assert

    # 10 | type | id=inputSearchBar | math
    # type math in input search bar 
    self.driver.find_element(By.ID, "inputSearchBar").send_keys("math")

    math_search_text = self.driver.find_element(By.ID, "inputSearchBar").get_attribute("value")
    assert math_search_text == "math", f"Search bar text is '{math_search_text}', expected 'math'"

    # 11 | sendKeys | id=inputSearchBar | ${KEY_ENTER}
    # enter key
    self.driver.find_element(By.ID, "inputSearchBar").send_keys(Keys.ENTER)

    expected_math_search_page_url = "https://qbrow.rasree.com/browseSearch?search_text=math"
    assert expected_math_search_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
        does not match expected URL '{expected_math_search_page_url}'"


    # 12 | click | id=inputHomeIcon | 
    # click on RASREE icon
    self.driver.find_element(By.ID, "inputHomeIcon").click()

    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"

    # 13 | click | id=inputViewAllCoursesButton | 
    # click on view all courses button
    self.driver.find_element(By.ID, "inputViewAllCoursesButton").click()

    expected_view_more_page_url = "https://qbrow.rasree.com/browseSearch?state=Published&type=courses"
    assert expected_view_more_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
        does not match expected URL '{expected_view_more_page_url}'"


    # 14 | click | id=inputHomeIcon | 
    # click on RASREE icon
    self.driver.find_element(By.ID, "inputHomeIcon").click()

    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"

    # 15 | click | id=inputViewCourseDetails_1 | 
    # click on view detail course
    wait.until(EC.element_to_be_clickable((By.ID,"inputViewCourseDetails_1"))).click()

    expected_input_view_course_details_1_page_url = "https://qbrow.rasree.com/course/1"
    assert expected_input_view_course_details_1_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
        does not match expected URL '{expected_input_view_course_details_1_page_url}'"


    # 16 | click | id=inputHomeIcon | 
    # click on RASREE icon
    self.driver.find_element(By.ID, "inputHomeIcon").click()

    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"


    # 17 | click | id=inputViewTeamDetailsButton | 
    # click on view team detail button
    self.driver.find_element(By.ID, "inputViewTeamDetailsButton").click()

    expected_input_view_team_details_button_page_url = "https://qbrow.rasree.com/about/team"
    assert expected_input_view_team_details_button_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
        does not match expected URL '{expected_input_view_team_details_button_page_url}'"

    # 18 | click | id=inputHomeIcon | 
    # click on RASREE icon
    self.driver.find_element(By.ID, "inputHomeIcon").click()

    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"


    # 19 | click | css=#inputViewCourse_Math > span | 
    # click on math link in footer 
    wait.until(EC.element_to_be_clickable((By.XPATH,"//span[normalize-space()='Math']"))).click()

    expected_math_link_footer_page_url = "https://qbrow.rasree.com/browseSearch?subject=Math"
    assert expected_math_link_footer_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
        does not match expected URL '{expected_math_link_footer_page_url}'"


    # 20 | click | id=inputHomeIcon | 
    # click on RASREE icon
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"

    # 21 | click | css=#inputViewAbhyasSection_About\ us > span | 
    # click on Abhyas section link in footer 
    self.driver.find_element(By.CSS_SELECTOR, "#inputViewAbhyasSection_About\\ us > span").click()

    expected_about_link_footer_page_url = "https://qbrow.rasree.com/privacy-policy"
    assert expected_about_link_footer_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
        does not match expected URL '{expected_about_link_footer_page_url}'"


    # 22 | click | id=inputHomeIcon | 
    # click on RASREE icon
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"


    # 23 | click | css=#inputViewTermsSection_Privacy\ policy > span | 
    # click on privacy link in footer 
    self.driver.find_element(By.CSS_SELECTOR, "#inputViewTermsSection_Privacy\\ policy > span").click()

    expected_privacy_policy_link_footer_page_url = "https://qbrow.rasree.com/privacy-policy"
    assert expected_privacy_policy_link_footer_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
        does not match expected URL '{expected_privacy_policy_link_footer_page_url}'"


    # 24 | click | id=inputHomeIcon | 
    # click on RASREE icon
    self.driver.find_element(By.ID, "inputHomeIcon").click()
    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"

    # time.sleep(5)
    # # 25 | click | id=inputSignUpButton | 
    # # click on sign up button (double click)
    # self.driver.find_element(By.ID, "inputSignUpButton").click()
    # # TODO :Add assert
    # self.driver.back()
    # time.sleep(5)

    # 26 | click | id=inputSignUpButton | 
    # click on sign up button (double click)
    # self.driver.find_element(By.ID, "inputSignUpButton").click()


    # 27 | click | css=.tf-v1-close | 
    # click on cross icon on typeform
    # self.driver.find_element(By.CSS_SELECTOR, ".tf-v1-close").click()

    # 28 | click | id=inputSignInButton | 
    # click on sign in button 
    self.driver.find_element(By.ID, "inputSignInButton").click()
    expected_title = "Rasree Login Page"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"
  
    # 29 | click | Go back | 
    # click on back button
    self.driver.back()
    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"

    # 30 | click | id=inputGetStartedButton | 
    # click on get started button 
    self.driver.find_element(By.ID, "inputGetStartedButton").click()
    expected_title = "Rasree Login Page"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
        does not match expected title '{expected_title}'"
