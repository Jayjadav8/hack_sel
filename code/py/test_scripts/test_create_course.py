# Generated by Selenium IDE
import pytest
import time
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.common.keys import Keys
import os
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.support.select import Select

class TestCreateCourseTest():
  '''
  - This is automation testing of create course page.
  - There are 3 methods which is executed in class TestCreateCourseTest, \
  which are setup_method, teardown_method and test_create_course.
  '''

  def setup_method(self, method):
    '''Set up the test environment before each test method runs
    - webdriver.Chrome class is used to create an instance of the Chrome browser driver.
    '''
    self.driver = webdriver.Chrome()
    self.vars = {}
  
  def teardown_method(self, method):
    '''
    - Clean up after each test method finishes.
    - self.driver.quit() is called.
    - This command tells Selenium to close and quit the web browser and release any associated resources.
    '''
    self.driver.quit()
  
  def test_create_course(self):
    '''
    - Test name: TestCreateCourseTest
    Step # | name | target | value
    - Each step is very well describe by dividing into small steps
     and  applying comments on each steps. 
     - Assert statements are been added to ensure each step is executed as expected.
    '''
    
    # Creating instance of WebDriverWait class.
    wait = WebDriverWait(self.driver, 60)

    # 1 | open | / | Go to URL https://qbrow.rasree.com/
    self.driver.get("https://qbrow.rasree.com/")
    # 2 | setWindowSize | 1382x744 | 
    self.driver.set_window_size(1440, 804)

    expected_title = "Home | Rasree"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
          does not match expected title '{expected_title}'"

    # 3 | click | id=inputSignInButton | 
    # Click on sign-in button
    self.driver.find_element(By.ID, "inputSignInButton").click()

    expected_title = "Rasree Login Page"
    assert expected_title in self.driver.title, f"Page title '{self.driver.title}'\
          does not match expected title '{expected_title}'"

    # 4 | type | id=username | admin_a
    # Enter username admin_a
    self.driver.find_element(By.ID, "username").send_keys("admin_a")

    username_text = self.driver.find_element(By.ID, "username").get_attribute("value")
    assert username_text == "admin_a", f"username text is '{username_text}', expected 'admin_a'"

    # 5 | click | id=password | 
    # click on input box of password
    self.driver.find_element(By.ID, "password").click()
    # 6 | type | id=password | password
    # Type password
    self.driver.find_element(By.ID, "password").send_keys("password")

    password_text = self.driver.find_element(By.ID, "password").get_attribute("value")
    assert password_text == "password", f"password text is '{password_text}', expected 'password'"

    # 7 | click | id=kc-login | 
    # click on login button
    self.driver.find_element(By.ID, "kc-login").click()

    expected_login_page_url = "https://qbrow.rasree.com/"
    assert expected_login_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
          does not match expected URL '{expected_login_page_url}'"
        
    # 8 | click | id=inputmenumodalbtn | 
    # click on menu modal
    wait.until(EC.element_to_be_clickable((By.ID,"inputmenumodalbtn"))).click()

    # 9 | click | id=inputCreateCourseButton | 
    # click on create button

    self.driver.find_element(By.ID, "inputCreateCourseButton").click()

    expected_login_page_url = "https://qbrow.rasree.com/course-create"
    assert expected_login_page_url == self.driver.current_url, f"URL '{self.driver.current_url}'\
          does not match expected URL '{expected_login_page_url}'"
        
    # 10 | click | id=inputBasicInfoCourseTitle | 
    # click on basic info button.
    wait.until(EC.element_to_be_clickable((By.ID,"inputBasicInfoCourseTitle"))).click()
 
    # 12 | type | id=inputBasicInfoCourseTitle | Org_Public_1_Maths_CBSE_10th
    # send keys to  course title
    self.driver.find_element(By.ID, "inputBasicInfoCourseTitle").send_keys("Org_Public_1_Maths_CBSE_10th")

    course_title_text = self.driver.find_element(By.ID, "inputBasicInfoCourseTitle").get_attribute("value")
    assert course_title_text == "Org_Public_1_Maths_CBSE_10th", f" Title text is '{course_title_text}', expected 'Org_Public_1_Maths_CBSE_10th'"


    # 13 | click | id=inputBasicInfoCourseDescription | 
    # click on  course description
    self.driver.find_element(By.ID, "inputBasicInfoCourseDescription").click()

    # 14 | type | id=inputBasicInfoCourseDescription | Basics of Algerbra
    # enter course description
    self.driver.find_element(By.ID, "inputBasicInfoCourseDescription").send_keys("Basics of Algebra")

    course_desc_text = self.driver.find_element(By.ID, "inputBasicInfoCourseDescription").get_attribute("value")
    assert course_desc_text == "Basics of Algebra", f" Description text is '{course_desc_text}', expected 'Basics of Algebra'"


    # 15 | click | id=inputBasicInfoCourseSubject | 
    # click on subject : Maths
    time.sleep(5)
    # wait.until(EC.element_to_be_clickable((By.ID,"inputBasicInfoCourseSubject")))

    subject_dropdown =   self.driver.find_element(By.ID, "inputBasicInfoCourseSubject")
    select_subject_from_drop_down = Select(subject_dropdown)
    select_subject_from_drop_down.select_by_value("Math")

    selected_subject_option = select_subject_from_drop_down.first_selected_option
    assert selected_subject_option.text == "Math", f"Expected 'Math' to be selected, but actual selection is '{selected_subject_option.text}'"


    # 16 | click | id=inputBasicInfoCourseCurriculum | 
    # click on curriculum

    curriculum_dropdown= wait.until(EC.element_to_be_clickable((By.ID,"inputBasicInfoCourseCurriculum")))

    # curriculum_dropdown = self.driver.find_element(By.ID, "inputBasicInfoCourseCurriculum")
  
    select_curriculum_from_drop_down = Select(curriculum_dropdown)
    select_curriculum_from_drop_down.select_by_value("CBSE")

    selected_curriculum_option = select_curriculum_from_drop_down.first_selected_option
    assert selected_curriculum_option.text == "CBSE", f"Expected 'CBSE' to be selected, but actual selection is '{selected_curriculum_option.text}'"

    # 17 | click | id=inputBasicInfoCourseGrade | 
    # click on grade

    grade_dropdown = self.driver.find_element(By.ID, "inputBasicInfoCourseGrade")
    select_grade_from_drop_down = Select(grade_dropdown)
    select_grade_from_drop_down.select_by_value("10th")

    selected_grade_option = select_grade_from_drop_down.first_selected_option
    assert selected_grade_option.text == "10th", f"Expected '10th' to be selected, but actual selection is '{selected_grade_option.text}'"


    # 18 | select | id=inputBasicInfoCourseTutor | label=tutor_math_a
    # select tutor_math_a

    tutor_dropdown = self.driver.find_element(By.ID, "inputBasicInfoCourseTutor")
    select_tutor_from_drop_down = Select(tutor_dropdown)
    select_tutor_from_drop_down.select_by_value("ff72fa64-e379-4762-97f3-9cc6ce29b853")

    selected_tutor_option = select_tutor_from_drop_down.first_selected_option
    assert selected_tutor_option.text == "tutor_math_a", f"Expected tutor math_a to be selected, but actual selection is '{selected_tutor_option.text}'"


    # 27 | click | id=inputSaveBasicInfo | 
    # click on save basic info
    # self.driver.find_element(By.ID, "inputSaveBasicInfo").click()

    # # 29 | type | id=inputScheduleInfoStartDate | 2023-08-04
    # # click on start date
    # time.sleep(6)
    # # start_date_input = self.driver.find_element(By.ID, "inputScheduleInfoStartDate").click()


    # time.sleep(6)
    # start_date_input.send_keys("04-08-2022")
    # print("****",start_date_input)
    # expected_start_date = "2023-08-04"
    # assert start_date_input.get_attribute("value") == expected_start_date, f"Entered start date '{start_date_input.get_attribute('value')}' does not match expected start date '{expected_start_date}'"



    # # 30 | click | id=inputScheduleInfoStartDate | 
    # # click on start date
    # self.driver.find_element(By.ID, "inputScheduleInfoStartDate").click()

    # # 31 | click | id=inputScheduleInfoStartDate | 
    # # click on start date
    # self.driver.find_element(By.ID, "inputScheduleInfoStartDate").click()

    # # 32 | click | id=inputScheduleInfoStartDate | 
    # # click on start date
    # self.driver.find_element(By.ID, "inputScheduleInfoStartDate").click()

    # # 33 | click | id=inputScheduleInfoStartDate | 
    # # click on start date
    # self.driver.find_element(By.ID, "inputScheduleInfoStartDate").click()

    # # 34 | doubleClick | id=inputScheduleInfoStartDate | 
    # # double click on start date
    # time.sleep(5)
    # element = self.driver.find_element(By.ID, "inputScheduleInfoStartDate")
    # actions = ActionChains(self.driver)
    # actions.double_click(element).perform()
    # # 35 | type | id=inputScheduleInfoStartDate | 0002-08-04
    # # select date from calendar 
    # self.driver.find_element(By.ID, "inputScheduleInfoStartDate").send_keys("0002-08-04")
    # # 36 | type | id=inputScheduleInfoStartDate | 0020-08-04
    # # type start date 0020-08-04
    # self.driver.find_element(By.ID, "inputScheduleInfoStartDate").send_keys("0020-08-04")
    # # 37 | type | id=inputScheduleInfoStartDate | 0202-08-0
    # # click on start date 0202-08-2
    # self.driver.find_element(By.ID, "inputScheduleInfoStartDate").send_keys("0202-08-0")
    # # 38 | type | id=inputScheduleInfoStartDate | 2024-08-04
    # # type start date 2024-08-04
    # self.driver.find_element(By.ID, "inputScheduleInfoStartDate").send_keys("2024-08-04")
    # # 39 | click | id=inputScheduleInfoEndDate | 
    # # click on end date
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").click()


    # 40 | click | id=inputScheduleInfoEndDate | 
    # # click on end date
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").click()
    # # 41 | type | id=inputScheduleInfoEndDate | 2023-08-06
    # # type end date 2023-08-06
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").send_keys("2023-08-06")
    # # # 42 | click | id=inputScheduleInfoEndDate | 
    # # # click on end date
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").click()
    # # # 43 | click | id=inputScheduleInfoEndDate | 
    # # # click on end date
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").click()
    # # # 44 | click | id=inputScheduleInfoEndDate | 
    # # # click on end date
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").click()
    # # # 45 | type | id=inputScheduleInfoEndDate | 0002-08-06
    # # type end date 0020-08-06
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").send_keys("0002-08-06")
    # # # 46 | type | id=inputScheduleInfoEndDate | 0020-08-06
    # # type end date 0020-08-06
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").send_keys("0020-08-06")
    # # # 47 | type | id=inputScheduleInfoEndDate | 0202-08-06
    # # type end date 0202-08-06
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").send_keys("0202-08-06")
    # # # 48 | type | id=inputScheduleInfoEndDate | 2024-08-06
    # # # enter end date 2024-08-04
    # self.driver.find_element(By.ID, "inputScheduleInfoEndDate").send_keys("2024-08-06")

    # 49 | click |
    # click on check box of monday
    time.sleep(5)
    self.driver.find_element(By.ID, "inputWeekname_Monday").click()
    
    # monday_checkbox = self.driver.find_element(By.XPATH, "//label[@id='inputWeekname_Monday']//span[@id='spanDiv']")
    # monday_selected = monday_checkbox.is_selected()
    # print("*****",monday_selected)
    # assert not monday_selected , "The Monday checkbox is not selected after clicking on it"

    # 50 | click on check box of  wednesday
    self.driver.find_element(By.ID, "inputWeekname_Wednesday").click()


    # 51 | click on checkbox of friday
    self.driver.find_element(By.ID, "inputWeekname_Friday").click()


    # 53 | click | id=inputDefaultStartTime | 
    # click on default start timer
    self.driver.find_element(By.ID, "inputDefaultStartTime").click()

    # 54 | type | id=inputDefaultStartTime | 12:00
    self.driver.find_element(By.ID, "inputDefaultStartTime").send_keys("12:00")

    input_default_start_time_text = self.driver.find_element(By.ID, "inputDefaultStartTime").get_attribute("value")
    assert input_default_start_time_text == "12:00", f" start time  text is '{input_default_start_time_text}', expected '12:00'"

    # 55 | click | id=inputDefaultSessionDuration | 
    # click on session duration
    self.driver.find_element(By.ID, "inputDefaultSessionDuration").click()

    # 54 | type | id=inputDefaultSessionDuration | 01:00
    self.driver.find_element(By.ID, "inputDefaultSessionDuration").send_keys("01:00")

    input_default_session_duration_text = self.driver.find_element(By.ID, "inputDefaultSessionDuration").get_attribute("value")
    assert input_default_session_duration_text == "01:00", f" session duration  text is '{input_default_session_duration_text}', expected '01:00'"

    # 62 | click | id=inputSaveScheduleInfo | 
    # click on continue button
    self.driver.find_element(By.ID, "inputSaveScheduleInfo").click()

    # 63 | click | id=inputMinimumStudent | 
    # click on minimum student
    wait.until(EC.element_to_be_clickable((By.ID,"inputMinimumStudent"))).click() 
    self.driver.find_element(By.ID, "inputMinimumStudent").send_keys("2")

    minimum_student_text = self.driver.find_element(By.ID, "inputMinimumStudent").get_attribute("value")
    assert minimum_student_text == "2", f" minimum student text is '{minimum_student_text}', expected '2'"

    # 65 | click | id=inputMaximumStudent | 
    # click on maximum student

    self.driver.find_element(By.ID, "inputMaximumStudent").send_keys("10")
    maximum_student_text = self.driver.find_element(By.ID, "inputMaximumStudent").get_attribute("value")
    assert maximum_student_text == "10", f" maximum students text is '{maximum_student_text}', expected '10'"


    # # 67 | click | id=inputCoursePayment_1 | 
    # # click on course payment
    self.driver.find_element(By.ID, "inputCoursePayment_1").click()
    # TODO assert

    # 69 | select | id=inputCurrency | label=Indian Rupee (INR)
    # select input currency Indian Rupee (INR)
    currency_dropdown = self.driver.find_element(By.ID, "inputCurrency")
    select_currency_from_drop_down = Select(currency_dropdown)
    select_currency_from_drop_down.select_by_value("Indian Rupee (INR)")

    selected_currency_option = select_currency_from_drop_down.first_selected_option
    assert selected_currency_option.text == "Indian Rupee (INR)", f"Expected 'Indian Rupee (INR)' to be selected, but actual selection is '{selected_grade_option.text}'"


    # 74 | type | id=inputCourseFees | 2000
    # type course fee 2000
    self.driver.find_element(By.ID, "inputCourseFees").send_keys("2000")

    course_fees_text = self.driver.find_element(By.ID, "inputCourseFees").get_attribute("value")
    assert course_fees_text == "2000", f" course fees  text is '{course_fees_text}', expected '2000'"

    # 75 | click | id=inputSavePriceEnrollInfo | 
    # click on continue button
    self.driver.find_element(By.ID, "inputSavePriceEnrollInfo").click()

  #  click on upload another file.
    wait.until(EC.element_to_be_clickable((By.ID,"inputUploadFileButton"))).click() 

    # Create sample file
    file_path = "sample.txt"  # Assuming the file is in the current working directory
    with open(file_path, "w") as f:
        list_sample = [1, 2, 3, 4, 5]
        for item in list_sample:
            f.write(str(item) + "\n")

    # Convert the relative file path to an absolute file path
    absolute_file_path = os.path.abspath(file_path)

  #  click on input select file and upload file
    file_upload_button = self.driver.find_element(By.ID, "inputSelectFile1")
    file_upload_button.send_keys(absolute_file_path)


  # check if file got uploaded , then file title is same as value in  document_title_text
    document_title_text = self.driver.find_element(By.ID, "additionalDocTitleID_1").get_attribute("value")
    assert document_title_text == file_path, f" document title text is '{document_title_text}', expected {file_path}"


    # 76 | click | id=inputSaveCourseAsReadyForApproval | 
    # Click on  save and  submit for approval.
    # self.driver.find_element(By.ID, "inputSaveCourseAsReadyForApproval").click()
  
